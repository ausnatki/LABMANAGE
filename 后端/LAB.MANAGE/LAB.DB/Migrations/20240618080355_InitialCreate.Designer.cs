// <auto-generated />
using System;
using LAB.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LAB.DB.Migrations
{
    [DbContext(typeof(LabContext))]
    [Migration("20240618080355_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LAB.MODEL.Academy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Academy");
                });

            modelBuilder.Entity("LAB.MODEL.DailySafetyCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Cleanliness")
                        .HasColumnType("bit");

                    b.Property<bool>("DoorsAndWindows")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricalLines")
                        .HasColumnType("bit");

                    b.Property<bool>("FireSafetyEquipmentAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("FireSafetyEquipmentExpiry")
                        .HasColumnType("bit");

                    b.Property<bool>("InstrumentEquipmentIntact")
                        .HasColumnType("bit");

                    b.Property<bool>("InstrumentEquipmentWorking")
                        .HasColumnType("bit");

                    b.Property<bool>("InstrumentWarningLabelsIntact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<string>("OtherHazards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSafetyHazards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("UID");

                    b.ToTable("TB_DailySafetyCheck");
                });

            modelBuilder.Entity("LAB.MODEL.LabAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabID");

                    b.HasIndex("UserID");

                    b.ToTable("LabAssignments");
                });

            modelBuilder.Entity("LAB.MODEL.LabEquipmentRepairs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ComletionStatus")
                        .HasColumnType("bit");

                    b.Property<int>("DLabID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<string>("IssuesFound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepairPersonnelID")
                        .HasColumnType("int");

                    b.Property<string>("Suggestions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DLabID");

                    b.ToTable("LabEquipmentRepairs");
                });

            modelBuilder.Entity("LAB.MODEL.LabInclidentHanding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DLabID")
                        .HasColumnType("int");

                    b.Property<string>("IncidentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InclidentTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<int>("RepairPersonnelID")
                        .HasColumnType("int");

                    b.Property<int>("ReportedByID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DLabID");

                    b.ToTable("LabInclidentHanding");
                });

            modelBuilder.Entity("LAB.MODEL.Laboratories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<int>("LabNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("LAB.MODEL.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LAB.MODEL.Semesters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("LAB.MODEL.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysUser");
                });

            modelBuilder.Entity("LAB.MODEL.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RID")
                        .HasColumnType("int");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RID");

                    b.HasIndex("UID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LAB.MODEL.DailySafetyCheck", b =>
                {
                    b.HasOne("LAB.MODEL.Laboratories", "Laboratories")
                        .WithMany("dailySafetyChecks")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB.MODEL.Semesters", "Semesters")
                        .WithMany("dailySafetyChecks")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB.MODEL.SysUser", "SysUser")
                        .WithMany("DailySafetyCheck")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratories");

                    b.Navigation("Semesters");

                    b.Navigation("SysUser");
                });

            modelBuilder.Entity("LAB.MODEL.LabAssignments", b =>
                {
                    b.HasOne("LAB.MODEL.Laboratories", "Laboratories")
                        .WithMany("LabAssignments")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB.MODEL.SysUser", "SysUser")
                        .WithMany("LabAssignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratories");

                    b.Navigation("SysUser");
                });

            modelBuilder.Entity("LAB.MODEL.LabEquipmentRepairs", b =>
                {
                    b.HasOne("LAB.MODEL.DailySafetyCheck", "dailySafetyChecks")
                        .WithMany("labEquipmentRepairs")
                        .HasForeignKey("DLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dailySafetyChecks");
                });

            modelBuilder.Entity("LAB.MODEL.LabInclidentHanding", b =>
                {
                    b.HasOne("LAB.MODEL.DailySafetyCheck", "dailySafetyChecks")
                        .WithMany("labInclidentHanding")
                        .HasForeignKey("DLabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dailySafetyChecks");
                });

            modelBuilder.Entity("LAB.MODEL.Laboratories", b =>
                {
                    b.HasOne("LAB.MODEL.Academy", "Academy")
                        .WithMany("laboratories")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("LAB.MODEL.UserRoles", b =>
                {
                    b.HasOne("LAB.MODEL.Roles", "Role")
                        .WithMany("user_roles")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB.MODEL.SysUser", "sysUser")
                        .WithMany("user_roles")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("sysUser");
                });

            modelBuilder.Entity("LAB.MODEL.Academy", b =>
                {
                    b.Navigation("laboratories");
                });

            modelBuilder.Entity("LAB.MODEL.DailySafetyCheck", b =>
                {
                    b.Navigation("labEquipmentRepairs");

                    b.Navigation("labInclidentHanding");
                });

            modelBuilder.Entity("LAB.MODEL.Laboratories", b =>
                {
                    b.Navigation("LabAssignments");

                    b.Navigation("dailySafetyChecks");
                });

            modelBuilder.Entity("LAB.MODEL.Roles", b =>
                {
                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("LAB.MODEL.Semesters", b =>
                {
                    b.Navigation("dailySafetyChecks");
                });

            modelBuilder.Entity("LAB.MODEL.SysUser", b =>
                {
                    b.Navigation("DailySafetyCheck");

                    b.Navigation("LabAssignments");

                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
